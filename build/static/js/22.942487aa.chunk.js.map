{"version":3,"sources":["components/common/editor/WriteActionButtons.js","containers/post/write/WriteActionButtonsContainer.js"],"names":["WriteActionButtonsBlock","styled","div","StyledButton","Button","WriteActionButtons","type","isEdit","onClick","onCancel","editorName","cyan","red","withRouter","history","dispatch","useDispatch","useSelector","post","title","body","tags","editPost","editPostError","targetPostId","useEffect","_id","publisher","push","username","updatePost","id","writePost","goBack"],"mappings":"obAQA,IAAMA,EAA0BC,IAAOC,IAAV,KAQvBC,EAAeF,YAAOG,IAAPH,CAAH,KAkBHI,IAdY,SAAC,GAAkD,IAAD,IAA/CC,YAA+C,MAAxC,OAAwC,EAAhCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACtDC,EAAsB,SAATJ,EAAkB,qBAAQ,eAC7C,OACE,kBAACN,EAAD,KACE,kBAACG,EAAD,CAAcQ,MAAI,EAACH,QAASA,GACzBE,EADH,IACgBH,EAAS,eAAO,gBAEhC,kBAACJ,EAAD,CAAcS,KAAG,EAACJ,QAASC,GAA3B,mB,iCC3BN,4DA0DeI,uBApDqB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAE/BC,EAAWC,cAFkC,EAW/CC,aAAY,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CAC7BC,MAAOD,EAAKC,MACZC,KAAMF,EAAKE,KACXC,KAAMH,EAAKG,KACXC,SAAUJ,EAAKI,SACfC,cAAeL,EAAKK,cACpBC,aAAcN,EAAKM,iBAZnBL,EALiD,EAKjDA,MACAC,EANiD,EAMjDA,KACAC,EAPiD,EAOjDA,KACAC,EARiD,EAQjDA,SACAC,EATiD,EASjDA,cACAC,EAViD,EAUjDA,aAiCF,OAVAC,qBAAU,WACR,GAAIH,EAAU,CAAC,IACLI,EAAmBJ,EAAnBI,IAAKC,EAAcL,EAAdK,UACbb,EAAQc,KAAR,iBAAuBD,EAAUE,SAAjC,YAA6CH,OAK9C,CAACZ,EAASQ,EAAUC,IAGrB,kBAAC,IAAD,CACEf,QAxBc,WAEdO,EADES,EACOM,YAAW,CAAEC,GAAIP,EAAcL,QAAOC,OAAMC,SAE5CW,YAAU,CAAEb,QAAOC,OAAMC,WAqBlCZ,SAjBa,WACfK,EAAQmB,UAiBN1B,SAAUiB","file":"static/js/22.942487aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../Button';\r\n\r\n/**\r\n * 에디터 작성버튼\r\n */\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n  margin-top: 1rem;\r\n  margin-bottom: 4rem;\r\n  button + button {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2.125rem;\r\n`;\r\n\r\nconst WriteActionButtons = ({ type = 'blog', isEdit, onClick, onCancel }) => {\r\n  const editorName = type === 'blog' ? '포스트' : '위키';\r\n  return (\r\n    <WriteActionButtonsBlock>\r\n      <StyledButton cyan onClick={onClick}>\r\n        {editorName} {isEdit ? '수정' : '등록'}\r\n      </StyledButton>\r\n      <StyledButton red onClick={onCancel}>\r\n        취소\r\n      </StyledButton>\r\n    </WriteActionButtonsBlock>\r\n  );\r\n};\r\n\r\nexport default WriteActionButtons;\r\n","import React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { writePost, updatePost } from '../../../module/redux/post';\r\nimport WriteActionButtons from '../../../components/common/editor/WriteActionButtons';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  // 액션 함수 불러오기\r\n  const dispatch = useDispatch();\r\n  // 전역 상태 불러오기\r\n  const {\r\n    title,\r\n    body,\r\n    tags,\r\n    editPost,\r\n    editPostError,\r\n    targetPostId,\r\n  } = useSelector(({ post }) => ({\r\n    title: post.title,\r\n    body: post.body,\r\n    tags: post.tags,\r\n    editPost: post.editPost,\r\n    editPostError: post.editPostError,\r\n    targetPostId: post.targetPostId,\r\n  }));\r\n  // 이벤트 정의\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (targetPostId) {\r\n      dispatch(updatePost({ id: targetPostId, title, body, tags }));\r\n    } else {\r\n      dispatch(writePost({ title, body, tags }));\r\n    }\r\n  };\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n  // 처리 후 작업\r\n  useEffect(() => {\r\n    if (editPost) {\r\n      const { _id, publisher } = editPost;\r\n      history.push(`/blog/@${publisher.username}/${_id}`);\r\n    }\r\n    if (editPostError) {\r\n      // TODO: Failure Write Post\r\n    }\r\n  }, [history, editPost, editPostError]);\r\n\r\n  return (\r\n    <WriteActionButtons\r\n      onClick={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!targetPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n"],"sourceRoot":""}