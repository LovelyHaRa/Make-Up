{"version":3,"sources":["lib/util.js","components/common/Pagination.js","containers/post/PaginationContainer.js"],"names":["getPageNumber","page","lastPage","result","front","mid","end","endpointSite","endpointBlockCount","i","push","halfBlockCount","parseInt","blockCount","count","sort","a","b","length","concat","PaginationBlock","styled","div","theme","text","PageLink","Button","PageButton","buildLink","path","query","AsyncPagination","handleClick","pageNumber","map","number","disabled","onClick","Pagination","to","className","withRouter","location","match","useSelector","post","loading","postList","username","params","qs","parse","search","ignoreQueryPrefix","tag","stringify"],"mappings":"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","file":"static/js/21.4e6478d9.chunk.js","sourcesContent":["/* 페이지 번호를 저장한 배열을 구하는 함수 */\r\nexport const getPageNumber = (page, lastPage) => {\r\n  /* CONFIG */\r\n  const endpointBlockCount = 3;\r\n  const blockCount = 5;\r\n\r\n  // 페이지 번호 그룹을 3개로 분할\r\n  // 총 페이지 블록 개수 : endpointBlockCount + blockCount + 1(첫/마지막 페이지)\r\n  const result = {\r\n    front: [],\r\n    mid: [],\r\n    end: [],\r\n  };\r\n  // 전체 페이지의 중간지점을 기준으로 위치 설정\r\n  // 해당되는 위치에 endpointBlockCount 값만큼 페이지 번호 할당, 반대편은 1개 할당(첫/마지막 페이지)\r\n  const endpointSite = page <= lastPage / 2 ? 'first' : 'last';\r\n  // 1. 전체 페이지 개수(lastPage)가 총 페이지 블록 개수보다 작으면 mid 위치에 페이지 블록 모두 삽입\r\n  if (lastPage <= endpointBlockCount + blockCount + 1) {\r\n    // 페이지 블록 모두 삽입\r\n    for (let i = 1; i <= lastPage; i += 1) {\r\n      result.mid.push(i);\r\n    }\r\n    // 양 끝 그룹 비활성화\r\n    result.front = null;\r\n    result.end = null;\r\n    // 리턴\r\n    return result;\r\n  }\r\n  // blockCount의 절반 값을 정수로 저장\r\n  const halfBlockCount = parseInt(blockCount / 2, 10);\r\n  // 2. 현 페이지가 왼쪽 구역일 경우\r\n  if (endpointSite === 'first') {\r\n    // front: 왼쪽 구역 블록 삽입\r\n    for (let i = 1; i <= endpointBlockCount; i += 1) {\r\n      result.front.push(i);\r\n    }\r\n    /**\r\n     * 현 페이지가 endpointBlockCount 보다 작으면\r\n     * 이미 포함되었으므로 페이지 값을 endpointBlockCount + 1로 설정\r\n     */\r\n    if (page <= endpointBlockCount) {\r\n      page = endpointBlockCount + 1;\r\n    }\r\n    // mid:\r\n    // 2-1. 현 페이지를 기준으로 왼쪽 halfBlock이 endpointBlock와 겹치는 경우\r\n    if (page - halfBlockCount <= endpointBlockCount) {\r\n      // 겹치는 개수를 구한다\r\n      let count = halfBlockCount;\r\n      for (let i = page - 1; i > endpointBlockCount; i -= 1) {\r\n        result.mid.push(i);\r\n        count -= 1;\r\n      }\r\n      // 겹친 개수만큼 오른쪽 블록에 추가\r\n      for (let i = page; i <= page + halfBlockCount + count; i += 1) {\r\n        result.mid.push(i);\r\n      }\r\n    } else {\r\n      // 그렇지 않으면 현 페이지를 중심으로 하여 blockCount만큼 페이지 블록 삽입\r\n      for (let i = page - halfBlockCount; i <= page + halfBlockCount; i += 1) {\r\n        result.mid.push(i);\r\n      }\r\n    }\r\n    // end: 마지막 페이지 번호만 삽입\r\n    result.end.push(lastPage);\r\n  } else if (endpointSite === 'last') {\r\n    // 오른쪽 구역일 경우\r\n    // front: 첫 페이지 번호만 삽입\r\n    result.front.push(1);\r\n    // end: 오른쪽 구역 블록 삽입\r\n    for (let i = 0; i < endpointBlockCount; i += 1) {\r\n      result.end.push(lastPage - i);\r\n    }\r\n    /**\r\n     * 현 페이지가 endpointBlockCount 보다 작으면\r\n     * 이미 포함되었으므로 페이지 값을 endpointBlockCount + 1로 설정\r\n     */\r\n    if (page >= lastPage - endpointBlockCount + 1) {\r\n      page = lastPage - endpointBlockCount;\r\n    }\r\n    // mid:\r\n    // 2-1. 현 페이지를 기준으로 오른쪽 halfBlock이 endpointBlock와 겹치는 경우\r\n    if (page + halfBlockCount >= lastPage - endpointBlockCount + 1) {\r\n      // 겹치는 개수를 구한다\r\n      let count = halfBlockCount;\r\n      for (let i = page + 1; i < lastPage - endpointBlockCount + 1; i += 1) {\r\n        result.mid.push(i);\r\n        count -= 1;\r\n      }\r\n      // 겹친 개수만큼 왼쪽 블록에 추가\r\n      for (let i = page; i >= page - halfBlockCount - count; i -= 1) {\r\n        result.mid.push(i);\r\n      }\r\n    } else {\r\n      // 그렇지 않으면 현 페이지를 중심으로 하여 blockCount만큼 페이지 블록 삽입\r\n      for (let i = page - halfBlockCount; i <= page + halfBlockCount; i += 1) {\r\n        result.mid.push(i);\r\n      }\r\n    }\r\n  }\r\n  // 3. 페이지 블록을 정렬\r\n  result.front.sort((a, b) => a - b);\r\n  result.mid.sort((a, b) => a - b);\r\n  result.end.sort((a, b) => a - b);\r\n\r\n  // 4. 각 그룹이 연결되면 mid로 병합\r\n  if (result.front[result.front.length - 1] + 1 === result.mid[0]) {\r\n    result.mid = result.front.concat(result.mid);\r\n    result.front = null;\r\n  }\r\n  if (result.mid[result.mid.length - 1] + 1 === result.end[0]) {\r\n    result.mid = result.mid.concat(result.end);\r\n    result.end = null;\r\n  }\r\n  // 리턴\r\n  return result;\r\n};\r\n\r\nexport default null;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { getPageNumber } from '../../lib/util';\r\nimport Button from './Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 2rem auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  span {\r\n    margin: 0 0.25rem;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  span::before {\r\n    content: '\\\\B7\\\\B7\\\\B7';\r\n  }\r\n`;\r\n\r\nconst PageLink = styled(Button)`\r\n  width: 1rem;\r\n  padding: 0.375rem;\r\n  text-align: center;\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst PageButton = styled(Button)`\r\n  width: 1.5rem;\r\n  padding: 0.375rem;\r\n  text-align: center;\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst buildLink = ({ path, query, page }) =>\r\n  query.length > 0 ? `${path}?${query}&page=${page}` : `${path}?page=${page}`;\r\n\r\nconst Pagination = ({ path, query, page, lastPage }) => {\r\n  const pageNumber = getPageNumber(page, lastPage);\r\n  return (\r\n    <PaginationBlock>\r\n      {pageNumber.front &&\r\n        pageNumber.front.map((number) => (\r\n          <PageLink\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageLink>\r\n        ))}\r\n      {pageNumber.front && <span className=\"page-skip\" />}\r\n      {pageNumber.mid &&\r\n        pageNumber.mid.map((number) => (\r\n          <PageLink\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageLink>\r\n        ))}\r\n      {pageNumber.end && <span className=\"page-skip\" />}\r\n      {pageNumber.end &&\r\n        pageNumber.end.map((number) => (\r\n          <PageLink\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageLink>\r\n        ))}\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport const AsyncPagination = ({ handleClick, page, lastPage }) => {\r\n  const pageNumber = getPageNumber(page, lastPage);\r\n  return (\r\n    <PaginationBlock>\r\n      {pageNumber.front &&\r\n        pageNumber.front.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            onClick={() => handleClick(number)}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n      {pageNumber.front && <span />}\r\n      {pageNumber.mid &&\r\n        pageNumber.mid.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            onClick={() => handleClick(number)}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n      {pageNumber.end && <span />}\r\n      {pageNumber.end &&\r\n        pageNumber.end.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            onClick={() => handleClick(number)}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport qs from 'qs';\r\nimport Pagination from '../../components/common/Pagination';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  // 전역 변수 불러오기\r\n  const { postList, loading, lastPage } = useSelector(({ post, loading }) => ({\r\n    postList: post.postList,\r\n    loading: loading['post/GET_LIST'],\r\n    lastPage: post.lastPage,\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!postList || loading) return null;\r\n\r\n  // page가 없으면 1을 기본으로 사용\r\n  const { username } = match.params;\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n  const query = qs.stringify({ tag });\r\n\r\n  return (\r\n    <Pagination\r\n      path={username ? `/blog/@${username}` : `/blog`}\r\n      query={query}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n"],"sourceRoot":""}