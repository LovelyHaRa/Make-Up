{"version":3,"sources":["components/post/write/TagBox.js","containers/post/write/TagBoxContainer.js"],"names":["TagBoxBlock","styled","div","theme","editorTagComponentBorder","editorTagTitle","TagForm","form","editorTagBoxBorder","body","editorText","editorTagButtonBody","editorTagButtonText","editorHoverTagButtonBody","Tag","editorTagText","TagListBlock","TagItem","React","memo","tag","onRemove","onClick","TagList","tags","map","TagBox","onChangeTags","useState","input","setInput","localTags","setLocalTags","insertTag","useCallback","includes","nextTags","filter","t","onChange","e","target","value","onSubmit","preventDefault","trim","useEffect","placeholder","type","TagBoxContainer","dispatch","useDispatch","useSelector","state","post","changeField","key"],"mappings":"otCAGA,IAAMA,EAAcC,IAAOC,IAAV,KAES,qBAAGC,MAAkBC,4BAIlC,qBAAGD,MAAkBE,kBAM5BC,EAAUL,IAAOM,KAAV,KAKS,qBAAGJ,MAAkBK,sBAYzB,qBAAGL,MAAkBM,QAC1B,qBAAGN,MAAkBO,cAKhB,qBAAGP,MAAkBQ,uBAC1B,qBAAGR,MAAkBS,uBAEd,qBAAGT,MAAkBU,4BAKnCC,EAAMb,IAAOC,IAAV,KAEE,qBAAGC,MAAkBY,iBAO1BC,EAAef,IAAOC,IAAV,KAKZe,EAAUC,IAAMC,MAAK,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,SAAR,OACzB,eAACP,EAAD,CAAKQ,QAAS,kBAAMD,EAASD,IAA7B,cAAqCA,QAGjCG,EAAUL,IAAMC,MAAK,gBAAGK,EAAH,EAAGA,KAAMH,EAAT,EAASA,SAAT,OACzB,cAACL,EAAD,UACGQ,EAAKC,KAAI,SAACL,GAAD,OACR,cAACH,EAAD,CAAmBG,IAAKA,EAAKC,SAAUA,GAAzBD,WA0DLM,EArDA,SAAC,GAA4B,IAA1BF,EAAyB,EAAzBA,KAAMG,EAAmB,EAAnBA,aAAmB,EACfC,mBAAS,IADM,mBAClCC,EADkC,KAC3BC,EAD2B,OAEPF,mBAAS,IAFF,mBAElCG,EAFkC,KAEvBC,EAFuB,KAInCC,EAAYC,uBAChB,SAACd,GACC,GAAKA,IACDW,EAAUI,SAASf,GAAvB,CACA,IAAMgB,EAAQ,sBAAOL,GAAP,CAAkBX,IAChCY,EAAaI,GACbT,EAAaS,MAEf,CAACL,EAAWJ,IAGRN,EAAWa,uBACf,SAACd,GACC,IAAMgB,EAAWL,EAAUM,QAAO,SAACC,GAAD,OAAOA,IAAMlB,KAC/CY,EAAaI,GACbT,EAAaS,KAEf,CAACL,EAAWJ,IAGRY,EAAWL,uBAAY,SAACM,GAC5BV,EAASU,EAAEC,OAAOC,SACjB,IAEGC,EAAWT,uBACf,SAACM,GACCA,EAAEI,iBACFX,EAAUJ,EAAMgB,QAChBf,EAAS,MAEX,CAACD,EAAOI,IAOV,OAJAa,qBAAU,WACRd,EAAaR,KACZ,CAACA,IAGF,eAACxB,EAAD,WACE,8CACA,eAACM,EAAD,CAASqC,SAAUA,EAAnB,UACE,uBAAOI,YAAY,+BAAWR,SAAUA,EAAUG,MAAOb,IACzD,wBAAQmB,KAAK,SAAb,6BAEF,cAACzB,EAAD,CAASC,KAAMO,EAAWV,SAAUA,QClG3B4B,UAjBS,WAEtB,IAAMC,EAAWC,cAEX3B,EAAO4B,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAK9B,QAGzCG,EAAeO,uBACnB,SAACE,GACCc,EAASK,YAAY,CAAEC,IAAK,OAAQd,MAAON,OAE7C,CAACc,IAGH,OAAO,cAAC,EAAD,CAAQvB,aAAcA,EAAcH,KAAMA","file":"static/js/27.c5567238.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${({ theme }) => theme.editorTagComponentBorder};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${({ theme }) => theme.editorTagTitle};\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${({ theme }) => theme.editorTagBoxBorder};\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n    min-width: 0;\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.editorText};\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding: 0 1rem;\r\n    background: ${({ theme }) => theme.editorTagButtonBody};\r\n    color: ${({ theme }) => theme.editorTagButtonText};\r\n    &:hover {\r\n      background: ${({ theme }) => theme.editorHoverTagButtonBody};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${({ theme }) => theme.editorTagText};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.7;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nconst TagItem = React.memo(({ tag, onRemove }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map((tag) => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    (tag) => {\r\n      if (!tag) return;\r\n      if (localTags.includes(tag)) return;\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (tag) => {\r\n      const nextTags = localTags.filter((t) => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      insertTag(input.trim());\r\n      setInput('');\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input placeholder=\"태그 입력...\" onChange={onChange} value={input} />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField } from '../../../module/redux/post';\r\nimport TagBox from '../../../components/post/write/TagBox';\r\n\r\nconst TagBoxContainer = () => {\r\n  // 액션 함수 불러오기\r\n  const dispatch = useDispatch();\r\n  // 전역 상태 불러오기\r\n  const tags = useSelector((state) => state.post.tags);\r\n\r\n  // 이벤트 정의\r\n  const onChangeTags = useCallback(\r\n    (nextTags) => {\r\n      dispatch(changeField({ key: 'tags', value: nextTags }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\r\n};\r\n\r\nexport default TagBoxContainer;\r\n"],"sourceRoot":""}