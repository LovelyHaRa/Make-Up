{"version":3,"sources":["components/common/Pagination.js","containers/post/PaginationContainer.js"],"names":["PaginationBlock","styled","div","theme","text","PageButton","Button","buildLink","path","query","page","length","Pagination","lastPage","pageNumber","result","front","mid","end","endpointSite","endpointBlockCount","i","push","halfBlockCount","parseInt","blockCount","count","sort","a","b","concat","getPageNumber","map","number","disabled","to","key","withRouter","location","match","useSelector","post","loading","postList","username","params","qs","parse","search","ignoreQueryPrefix","tag","stringify"],"mappings":"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","file":"static/js/21.3b1bd365.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\n\r\nconst PaginationBlock = styled.div`\r\n  width: 320px;\r\n  margin: 2rem auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  span {\r\n    margin: 0 0.25rem;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  span:before {\r\n    content: '\\\\B7\\\\B7\\\\B7';\r\n  }\r\n`;\r\n\r\nconst PageButton = styled(Button)`\r\n  width: 1rem;\r\n  padding: 0.375rem;\r\n  text-align: center;\r\n  & + & {\r\n    margin-left: 0.25rem;\r\n  }\r\n`;\r\n\r\nconst buildLink = ({ path, query, page }) => {\r\n  return query.length > 0\r\n    ? `${path}?${query}&page=${page}`\r\n    : `${path}?page=${page}`;\r\n};\r\n\r\n/* CONFIG */\r\nconst endpointBlockCount = 3;\r\nconst blockCount = 5;\r\n\r\n/* 페이지 번호를 저장한 배열을 구하는 함수 */\r\nconst getPageNumber = (page, lastPage) => {\r\n  // 페이지 번호 그룹을 3개로 분할\r\n  // 총 페이지 블록 개수 : endpointBlockCount + blockCount + 1(첫/마지막 페이지)\r\n  const result = {\r\n    front: [],\r\n    mid: [],\r\n    end: [],\r\n  };\r\n  // 전체 페이지의 중간지점을 기준으로 위치 설정\r\n  // 해당되는 위치에 endpointBlockCount 값만큼 페이지 번호 할당, 반대편은 1개 할당(첫/마지막 페이지)\r\n  const endpointSite = page <= lastPage / 2 ? 'first' : 'last';\r\n  // 1. 전체 페이지 개수(lastPage)가 총 페이지 블록 개수보다 작으면 mid 위치에 페이지 블록 모두 삽입\r\n  if (lastPage <= endpointBlockCount + blockCount + 1) {\r\n    // 페이지 블록 모두 삽입\r\n    for (let i = 1; i <= lastPage; i++) {\r\n      result.mid.push(i);\r\n    }\r\n    // 양 끝 그룹 비활성화\r\n    result.front = null;\r\n    result.end = null;\r\n    // 리턴\r\n    return result;\r\n  }\r\n  // blockCount의 절반 값을 정수로 저장\r\n  const halfBlockCount = parseInt(blockCount / 2);\r\n  // 2. 현 페이지가 왼쪽 구역일 경우\r\n  if (endpointSite === 'first') {\r\n    // front: 왼쪽 구역 블록 삽입\r\n    for (let i = 1; i <= endpointBlockCount; i++) {\r\n      result.front.push(i);\r\n    }\r\n    /**\r\n     * 현 페이지가 endpointBlockCount 보다 작으면\r\n     * 이미 포함되었으므로 페이지 값을 endpointBlockCount + 1로 설정\r\n     */\r\n    if (page <= endpointBlockCount) {\r\n      page = endpointBlockCount + 1;\r\n    }\r\n    // mid:\r\n    // 2-1. 현 페이지를 기준으로 왼쪽 halfBlock이 endpointBlock와 겹치는 경우\r\n    if (page - halfBlockCount <= endpointBlockCount) {\r\n      // 겹치는 개수를 구한다\r\n      let count = halfBlockCount;\r\n      for (let i = page - 1; i > endpointBlockCount; i--) {\r\n        result.mid.push(i);\r\n        count--;\r\n      }\r\n      // 겹친 개수만큼 오른쪽 블록에 추가\r\n      for (let i = page; i <= page + halfBlockCount + count; i++) {\r\n        result.mid.push(i);\r\n      }\r\n    } else {\r\n      // 그렇지 않으면 현 페이지를 중심으로 하여 blockCount만큼 페이지 블록 삽입\r\n      for (let i = page - halfBlockCount; i <= page + halfBlockCount; i++) {\r\n        result.mid.push(i);\r\n      }\r\n    }\r\n    // end: 마지막 페이지 번호만 삽입\r\n    result.end.push(lastPage);\r\n  } else if (endpointSite === 'last') {\r\n    // 오른쪽 구역일 경우\r\n    // front: 첫 페이지 번호만 삽입\r\n    result.front.push(1);\r\n    // end: 오른쪽 구역 블록 삽입\r\n    for (let i = 0; i < endpointBlockCount; i++) {\r\n      result.end.push(lastPage - i);\r\n    }\r\n    /**\r\n     * 현 페이지가 endpointBlockCount 보다 작으면\r\n     * 이미 포함되었으므로 페이지 값을 endpointBlockCount + 1로 설정\r\n     */\r\n    if (page >= lastPage - endpointBlockCount + 1) {\r\n      page = lastPage - endpointBlockCount;\r\n    }\r\n    // mid:\r\n    // 2-1. 현 페이지를 기준으로 오른쪽 halfBlock이 endpointBlock와 겹치는 경우\r\n    if (page + halfBlockCount >= lastPage - endpointBlockCount + 1) {\r\n      // 겹치는 개수를 구한다\r\n      let count = halfBlockCount;\r\n      for (let i = page + 1; i < lastPage - endpointBlockCount + 1; i++) {\r\n        result.mid.push(i);\r\n        count--;\r\n      }\r\n      // 겹친 개수만큼 왼쪽 블록에 추가\r\n      for (let i = page; i >= page - halfBlockCount - count; i--) {\r\n        result.mid.push(i);\r\n      }\r\n    } else {\r\n      // 그렇지 않으면 현 페이지를 중심으로 하여 blockCount만큼 페이지 블록 삽입\r\n      for (let i = page - halfBlockCount; i <= page + halfBlockCount; i++) {\r\n        result.mid.push(i);\r\n      }\r\n    }\r\n  }\r\n  // 3. 페이지 블록을 정렬\r\n  result.front.sort((a, b) => a - b);\r\n  result.mid.sort((a, b) => a - b);\r\n  result.end.sort((a, b) => a - b);\r\n\r\n  // 4. 각 그룹이 연결되면 mid로 병합\r\n  if (result.front[result.front.length - 1] + 1 === result.mid[0]) {\r\n    result.mid = result.front.concat(result.mid);\r\n    result.front = null;\r\n  }\r\n  if (result.mid[result.mid.length - 1] + 1 === result.end[0]) {\r\n    result.mid = result.mid.concat(result.end);\r\n    result.end = null;\r\n  }\r\n  // 리턴\r\n  return result;\r\n};\r\n\r\nconst Pagination = ({ path, query, page, lastPage }) => {\r\n  const pageNumber = getPageNumber(page, lastPage);\r\n  return (\r\n    <PaginationBlock>\r\n      {pageNumber.front &&\r\n        pageNumber.front.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n      {pageNumber.front && <span />}\r\n      {pageNumber.mid &&\r\n        pageNumber.mid.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n      {pageNumber.end && <span />}\r\n      {pageNumber.end &&\r\n        pageNumber.end.map((number) => (\r\n          <PageButton\r\n            disabled={page === number}\r\n            to={buildLink({ path, query, page: number })}\r\n            key={number}\r\n          >\r\n            {number}\r\n          </PageButton>\r\n        ))}\r\n    </PaginationBlock>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport Pagination from '../../components/common/Pagination';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport qs from 'qs';\r\n\r\nconst PaginationContainer = ({ location, match }) => {\r\n  // 전역 변수 불러오기\r\n  const { postList, loading, lastPage } = useSelector(({ post, loading }) => ({\r\n    postList: post.postList,\r\n    loading: loading['post/GET_LIST'],\r\n    lastPage: post.lastPage,\r\n  }));\r\n\r\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\r\n  if (!postList || loading) return null;\r\n\r\n  // page가 없으면 1을 기본으로 사용\r\n  const { username } = match.params;\r\n  const { tag, page = 1 } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n  const query = qs.stringify({ tag });\r\n\r\n  return (\r\n    <Pagination\r\n      path={username ? `/blog/@${username}` : `/blog`}\r\n      query={query}\r\n      page={parseInt(page, 10)}\r\n      lastPage={lastPage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);\r\n"],"sourceRoot":""}