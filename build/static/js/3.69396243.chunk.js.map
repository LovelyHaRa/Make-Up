{"version":3,"sources":["components/post/common/PostItem.js","components/post/PostList.js","containers/post/PostListContainer.js"],"names":["PostItemBlock","styled","div","theme","postBorder","text","hoverText","PostItem","post","username","_id","title","body","tags","publisher","publishedDate","to","SubInfo","Tags","className","PostListBlock","PostListErrorBlock","ErrorBlock","TitleWrapper","WritePostButton","isDarkTheme","Button","violet","cyan","PostList","postList","loading","error","showWriteButton","tag","Responsive","message","map","key","PaginationContainer","loadable","withRouter","location","match","dispatch","useDispatch","useSelector","user","postListError","params","qs","parse","search","ignoreQueryPrefix","page","pagination","useRef","useEffect","getList","current","unloadList"],"mappings":"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","file":"static/js/3.69396243.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\nimport SubInfo from './SubInfo';\r\nimport Tags from './Tags';\r\n\r\nconst PostItemBlock = styled.div`\r\n  padding-top: 1rem;\r\n  padding-bottom: 1rem;\r\n\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${({ theme }) => theme.postBorder};\r\n  }\r\n  h2 {\r\n    font-size: 1.5rem;\r\n    font-family: 'NanumBarunGothic';\r\n    font-weight: 500;\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n      color: ${({ theme }) => theme.hoverText};\r\n    }\r\n  }\r\n  .tags {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n  & > a {\r\n    margin-top: 1rem;\r\n    color: ${({ theme }) => theme.text};\r\n    &:hover {\r\n      color: ${({ theme }) => theme.hoverText};\r\n    }\r\n  }\r\n  .item-body {\r\n    font-family: 'NanumBarunGothic';\r\n  }\r\n`;\r\n\r\nconst PostItem = ({ post, username }) => {\r\n  const { _id, title, body, tags, publisher, publishedDate } = post;\r\n  return (\r\n    <PostItemBlock>\r\n      <h2>\r\n        <Link to={`/blog/@${publisher.username}/${_id}`}>{title}</Link>\r\n      </h2>\r\n      <SubInfo username={publisher.username} publishedDate={publishedDate} />\r\n      <Tags tags={tags} username={username} />\r\n      <Link className=\"item-body\" to={`/blog/@${publisher.username}/${_id}`}>\r\n        {body}\r\n      </Link>\r\n    </PostItemBlock>\r\n  );\r\n};\r\n\r\nexport default PostItem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport PostItem from './common/PostItem';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport ErrorBlock from '../common/ErrorBlock';\r\n\r\nconst PostListBlock = styled.div`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst PostListErrorBlock = styled(ErrorBlock)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  .title {\r\n    font-size: 1.25rem;\r\n    font-family: 'Raleway';\r\n    font-weight: 600;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .sub-title {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst WritePostButton = ({ isDarkTheme }) => {\r\n  const btn = !isDarkTheme ? (\r\n    <Button cyan=\"true\" to={'/blog/write'}>\r\n      포스트 작성\r\n    </Button>\r\n  ) : (\r\n    <Button violet=\"true\" to={'/blog/write'}>\r\n      포스트 작성\r\n    </Button>\r\n  );\r\n  return btn;\r\n};\r\n\r\nconst PostList = ({\r\n  postList,\r\n  loading,\r\n  error,\r\n  showWriteButton,\r\n  isDarkTheme,\r\n  username,\r\n  tag,\r\n}) => {\r\n  if (error) {\r\n    return (\r\n      <Responsive>\r\n        <PostListErrorBlock>\r\n          <span className=\"error-title\">블로그 리스트 요청 실패.</span>\r\n          <span className=\"error-msg\">ERROR MESSAGE: {error.message}</span>\r\n        </PostListErrorBlock>\r\n      </Responsive>\r\n    );\r\n  }\r\n  return (\r\n    <Responsive>\r\n      <PostListBlock>\r\n        <Helmet>\r\n          <title>MAKE UP HARA :: BLOG</title>\r\n          {username && <title>{username} - MAKE UP HARA :: BLOG</title>}\r\n          {tag && <title>#{tag} - MAKE UP HARA :: BLOG</title>}\r\n          {username && tag && (\r\n            <title>\r\n              {username}#{tag} - MAKE UP HARA :: BLOG\r\n            </title>\r\n          )}\r\n        </Helmet>\r\n        <TitleWrapper>\r\n          <span className=\"title\">\r\n            BLOG\r\n            {username && !tag && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">{username}</span>\r\n              </span>\r\n            )}\r\n            {tag && !username && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">#{tag}</span>\r\n              </span>\r\n            )}\r\n            {username && tag && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">{username}</span>\r\n                <span className=\"sub-title\">#{tag}</span>\r\n              </span>\r\n            )}\r\n          </span>\r\n          {showWriteButton && <WritePostButton isDarkTheme={isDarkTheme} />}\r\n        </TitleWrapper>\r\n        {!loading && postList && (\r\n          <div>\r\n            {postList.map((post) => (\r\n              <PostItem post={post} username={username} key={post._id} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </PostListBlock>\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport qs from 'qs';\r\nimport { getList, unloadList } from '../../module/redux/post';\r\nimport PostList from '../../components/post/PostList';\r\nimport loadable from '@loadable/component';\r\nconst PaginationContainer = loadable(() => import('./PaginationContainer'));\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  // 액션 함수 불러오기\r\n  const dispatch = useDispatch();\r\n  // 전역 상태 불러오기\r\n  const { postList, error, loading, user, isDarkTheme } = useSelector(\r\n    ({ post, loading, user, theme }) => ({\r\n      postList: post.postList,\r\n      error: post.postListError,\r\n      loading: loading['post/GET_LIST'],\r\n      user: user.user,\r\n      isDarkTheme: theme.isDarkTheme,\r\n    }),\r\n  );\r\n  const { username } = match.params;\r\n  const { tag, page } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n  const pagination = useRef(false);\r\n  useEffect(() => {\r\n    dispatch(getList({ username, tag, page }));\r\n    pagination.current = true;\r\n    return () => {\r\n      dispatch(unloadList());\r\n      pagination.current = false;\r\n    }\r\n  }, [dispatch, tag, page, username]);\r\n\r\n  return (\r\n    <>\r\n      <PostList\r\n        loading={loading}\r\n        error={error}\r\n        postList={postList}\r\n        showWriteButton={user}\r\n        isDarkTheme={isDarkTheme}\r\n        username={username}\r\n        tag={tag}\r\n      />\r\n      {pagination.current && !error && <PaginationContainer />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n"],"sourceRoot":""}