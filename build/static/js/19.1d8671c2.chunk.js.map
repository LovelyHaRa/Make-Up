{"version":3,"sources":["components/common/ErrorBlock.js","components/profile/Profile.js","containers/profile/ProfileContainer.js"],"names":["ErrorBlock","styled","div","theme","text","errorText","ProfileBlock","categoryBorder","profileInfoValueBody","profileInputValid","profileInputInValid","StyleInput","input","body","ProfileSubmitButton","Button","ProfileErrorBlock","Profile","user","form","onChange","onSubmit","isValid","validMessage","resultMessage","className","username","provider","isExistValid","existName","isEqualValid","equalName","validNameMessage","submitMessage","submit","errorMessage","error","type","name","value","themeColor","fullWidth","disabled","ProfileContainer","dispatch","useDispatch","useSelector","profile","isNotExistName","checkExistNameResult","updateUser","updateUserError","useState","setIsValid","setValidMessage","setResultMessage","loadingForm","useRef","useCallback","e","prevState","target","changeField","key","preventDefault","isExist","isEqual","updateName","id","_id","useEffect","current","newName","curName","checkExistName","toLowerCase","result","message","check","initializeUpdateName"],"mappings":"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","file":"static/js/19.1d8671c2.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\n/**\r\n * 에러를 보여주기 위한 컴포넌트\r\n */\r\n\r\nconst ErrorBlock = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 3rem;\r\n  font-family: 'NanumBarunGothic';\r\n  color: ${({ theme }) => theme.text};\r\n  span + span {\r\n    margin-top: 1rem;\r\n  }\r\n  .error-msg {\r\n    color: ${({ theme }) => theme.errorText};\r\n  }\r\n`;\r\n\r\nexport default ErrorBlock;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\nimport ErrorBlock from '../common/ErrorBlock';\r\n\r\n/**\r\n * 프로필 컴포넌트\r\n * 기능: 이름 변경\r\n */\r\n\r\nexport const ProfileBlock = styled.div`\r\n  margin-top: 2rem;\r\n  margin-left: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: ${({ theme }) => theme.text};\r\n\r\n  .profile-info {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n  }\r\n  .profile-info-title {\r\n    font-weight: 300;\r\n    font-size: 1.5rem;\r\n    font-family: 'Raleway', 'NanumGothic';\r\n  }\r\n  .profile-info-explain {\r\n    font-size: 1rem;\r\n    font-family: 'NanumGothic';\r\n    margin-top: 0.25rem;\r\n    color: ${({ theme }) => theme.categoryBorder};\r\n  }\r\n  .profile-info-value {\r\n    margin-top: 1.25rem;\r\n    span {\r\n      padding: 0.25rem 0.5rem;\r\n      font-size: 1.125rem;\r\n      font-family: 'Raleway', 'NanumGothic';\r\n      border-radius: 0.25rem;\r\n      background-color: ${({ theme }) => theme.profileInfoValueBody};\r\n    }\r\n  }\r\n  hr {\r\n    border: 0.5px solid ${({ theme }) => theme.categoryBorder};\r\n  }\r\n  .profile-form {\r\n    margin: 1.5rem 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .value-provider {\r\n    text-transform: uppercase;\r\n  }\r\n  .possible {\r\n    border: 2px solid ${({ theme }) => theme.profileInputValid};\r\n  }\r\n  .impossible {\r\n    border: 2px solid ${({ theme }) => theme.profileInputInValid};\r\n  }\r\n  .invalid-message {\r\n    font-weight: 300;\r\n    color: ${({ theme }) => theme.errorText};\r\n    margin-top: 0.5rem;\r\n  }\r\n  .success-message {\r\n    font-weight: 300;\r\n    color: ${({ theme }) => theme.categoryBorder};\r\n    margin-top: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst StyleInput = styled.input`\r\n  margin-top: 1.25rem;\r\n  padding: 0.5rem 0.75rem;\r\n  font-size: 1.125rem;\r\n  font-family: 'Raleway', 'NanumGothic';\r\n  border-radius: 0.25rem;\r\n  background-color: ${({ theme }) => theme.profileInfoValueBody};\r\n  color: ${({ theme }) => theme.text};\r\n  outline: none;\r\n  border: 2px solid ${({ theme }) => theme.body};\r\n`;\r\n\r\nconst ProfileSubmitButton = styled(Button)`\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\nexport const ProfileErrorBlock = styled(ErrorBlock)`\r\n  margin: 2rem;\r\n`;\r\n\r\nconst Profile = ({\r\n  user,\r\n  form,\r\n  onChange,\r\n  onSubmit,\r\n  isValid,\r\n  validMessage,\r\n  resultMessage,\r\n}) => {\r\n  if (!user) {\r\n    return (\r\n      <ProfileErrorBlock>\r\n        <span className=\"error-title\">로그인 정보가 없어요...ㅠ</span>\r\n      </ProfileErrorBlock>\r\n    );\r\n  }\r\n  const { username, provider } = user;\r\n  const { existName: isExistValid, equalName: isEqualValid } = isValid;\r\n  const { existName: validNameMessage } = validMessage;\r\n  const { submit: submitMessage, error: errorMessage } = resultMessage;\r\n  return (\r\n    <ProfileBlock>\r\n      <div>\r\n        <div className=\"profile-info\">\r\n          <span className=\"profile-info-title\">ID</span>\r\n          <div className=\"profile-info-value\">\r\n            <span>{username}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-info\">\r\n          <span className=\"profile-info-title\">로그인 유형</span>\r\n          <span className=\"profile-info-explain\">\r\n            어떤 방식으로 로그인했는지를 확인합니다.\r\n          </span>\r\n          <div className=\"profile-info-value\">\r\n            <span className=\"value-provider\">{provider}</span>\r\n          </div>\r\n        </div>\r\n        <hr />\r\n        <form className=\"profile-form\" onSubmit={onSubmit}>\r\n          <div className=\"profile-info\">\r\n            <span className=\"profile-info-title\">DISPLAY NAME</span>\r\n            <span className=\"profile-info-explain\">\r\n              다른 사용자들에게 보여지는 이름입니다.\r\n            </span>\r\n            <StyleInput\r\n              type=\"text\"\r\n              name=\"name\"\r\n              className={\r\n                !isEqualValid &&\r\n                (isExistValid === true ? 'possible' : 'impossible')\r\n              }\r\n              value={form.name ? form.name : ''}\r\n              onChange={onChange}\r\n            />\r\n            {isExistValid === false && (\r\n              <span className=\"invalid-message\">{validNameMessage}</span>\r\n            )}\r\n            {submitMessage !== '' && (\r\n              <span className=\"success-message\">{submitMessage}</span>\r\n            )}\r\n            {errorMessage !== '' && (\r\n              <span className=\"invalid-message\">{errorMessage}</span>\r\n            )}\r\n          </div>\r\n          <ProfileSubmitButton\r\n            themeColor\r\n            fullWidth\r\n            disabled={!isExistValid || isEqualValid}\r\n          >\r\n            수정\r\n          </ProfileSubmitButton>\r\n        </form>\r\n      </div>\r\n    </ProfileBlock>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Profile from '../../components/profile/Profile';\r\nimport {\r\n  changeField,\r\n  checkExistName,\r\n  check,\r\n  initializeUpdateName,\r\n  updateName,\r\n} from '../../module/redux/user';\r\n\r\nconst ProfileContainer = () => {\r\n  // 액션 함수 불러오기\r\n  const dispatch = useDispatch();\r\n  // 전역 상태 불러오기\r\n  const {\r\n    user,\r\n    form,\r\n    isNotExistName,\r\n    updateUser,\r\n    updateUserError,\r\n  } = useSelector(({ user }) => ({\r\n    user: user.user,\r\n    form: user.profile,\r\n    isNotExistName: user.checkExistNameResult,\r\n    updateUser: user.updateUser,\r\n    updateUserError: user.updateUserError,\r\n  }));\r\n\r\n  // 사용 가능한 이름 여부, 기존 사용자 이름이랑 일치하는지 여부\r\n  const [isValid, setIsValid] = useState({ existName: true, equalName: true });\r\n  // 검증 메시지\r\n  const [validMessage, setValidMessage] = useState({\r\n    existName: null,\r\n  });\r\n  // 결과 메시지\r\n  const [resultMessage, setResultMessage] = useState({\r\n    submit: null,\r\n    error: null,\r\n  });\r\n  // form 로딩 여부\r\n  const loadingForm = useRef(true);\r\n\r\n  // input 상태 반영\r\n  const onChange = useCallback(\r\n    (e) => {\r\n      setValidMessage((prevState) => ({ ...prevState, existName: null }));\r\n      setResultMessage({\r\n        submit: null,\r\n        error: null,\r\n      });\r\n      const { value, name } = e.target;\r\n      dispatch(changeField({ form: 'profile', key: name, value }));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      const { isExist, isEqual } = isValid;\r\n      if (isExist && !isEqual) {\r\n        dispatch(updateName({ id: user._id, name: form.name }));\r\n      }\r\n    },\r\n    [dispatch, form.name, user, isValid],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!user || loadingForm.current) return;\r\n    const newName = form.name;\r\n    const curName = user ? user.name : '';\r\n    // 이름이 현재 사용자 이름이랑 다르면\r\n    if (newName === '') {\r\n      dispatch(checkExistName({ username: user.username, name: '' })); // 요청해서 공백일 떄의 결과 값을 갱신 한다\r\n    } else if (newName.toLowerCase() !== curName.toLowerCase()) {\r\n      // 이름이 사용 가능한지 비동기로 요청\r\n      dispatch(checkExistName({ username: user.username, name: newName }));\r\n      setIsValid((prevState) => ({ ...prevState, equalName: false }));\r\n    } else {\r\n      setIsValid((prevState) => ({ ...prevState, equalName: true }));\r\n    }\r\n  }, [dispatch, form.name, user]);\r\n\r\n  useEffect(() => {\r\n    // 중복되지 않은 이름일 때\r\n    if (!isNotExistName || (isNotExistName && isNotExistName.result)) {\r\n      setIsValid((prevState) => ({ ...prevState, existName: true }));\r\n    } else {\r\n      // 상태 업데이트\r\n      setIsValid((prevState) => ({\r\n        ...prevState,\r\n        existName: false,\r\n        equalName: false,\r\n      }));\r\n      // 메시지 저장\r\n      setValidMessage((prevState) => ({\r\n        ...prevState,\r\n        existName: isNotExistName ? isNotExistName.message : null,\r\n      }));\r\n    }\r\n  }, [isNotExistName]);\r\n\r\n  useEffect(() => {\r\n    const { name } = user || '';\r\n    dispatch(changeField({ form: 'profile', key: 'name', value: name }));\r\n    loadingForm.current = false;\r\n  }, [dispatch, user]);\r\n\r\n  useEffect(() => {\r\n    if (updateUser) {\r\n      dispatch(check());\r\n      setResultMessage({\r\n        submit: '성공적으로 수정되었습니다.',\r\n        error: null,\r\n      });\r\n      dispatch(initializeUpdateName());\r\n    } else if (updateUserError) {\r\n      setResultMessage({\r\n        submit: null,\r\n        error: '에러가 발생했습니다.',\r\n      });\r\n      dispatch(initializeUpdateName());\r\n    }\r\n  }, [dispatch, updateUser, updateUserError]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      dispatch(initializeUpdateName());\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <Profile\r\n      user={user}\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      isValid={isValid}\r\n      validMessage={validMessage}\r\n      resultMessage={resultMessage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfileContainer;\r\n"],"sourceRoot":""}