{"version":3,"sources":["components/common/CustomSlider.js","components/post/PostList.js","containers/post/PostListContainer.js"],"names":["PageSlider","styled","Slider","theme","sliderTrack","sliderRail","PostListBlock","div","text","PostListErrorBlock","ErrorBlock","TitleWrapper","WritePostButton","isDarkTheme","Button","violet","to","cyan","PageBlock","block","handlePageBlock","className","Typography","valueLabelDisplay","defaultValue","marks","min","max","step","value","onChange","PostList","postList","error","loading","showWriteButton","username","tag","Responsive","message","map","post","PostItem","key","_id","PaginationContainer","loadable","withRouter","location","match","dispatch","useDispatch","useSelector","user","postListError","params","qs","parse","search","ignoreQueryPrefix","page","useState","setBlock","pagination","useRef","useEffect","current","getList","unloadList","e","newValue"],"mappings":"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","file":"static/js/3.ff63ed01.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n/**\r\n * 커스텀 페이지 슬라이더\r\n */\r\n\r\nexport const PageSlider = styled(Slider)`\r\n  &.MuiSlider-root {\r\n    flex: 1;\r\n    margin-top: -0.5rem;\r\n    color: ${({ theme }) => theme.sliderTrack};\r\n  }\r\n  & span.MulSlider-makr:first-of-type {\r\n    width: 0;\r\n  }\r\n  .MuiSlider-thumb {\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    background-color: ${({ theme }) => theme.sliderRail};\r\n    border: 2px solid ${({ theme }) => theme.sliderTrack};\r\n    margin-top: -0.5rem;\r\n    margin-left: -0.75rem;\r\n  }\r\n  .MuiSlider-mark {\r\n    height: 0.5rem;\r\n    width: 1px;\r\n    background-color: ${({ theme }) => theme.sliderRail};\r\n  }\r\n  .MuiSlider-track {\r\n    height: 0.5rem;\r\n  }\r\n  .MuiSlider-rail {\r\n    height: 0.5rem;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport PostItem from './common/PostItem';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport ErrorBlock from '../common/ErrorBlock';\r\nimport { PageSlider } from '../common/CustomSlider';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst PostListBlock = styled.div`\r\n  margin-top: 3rem;\r\n  .page-block {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    width: 50%;\r\n    @media screen and (max-width: 700px) {\r\n      width: 70%;\r\n    }\r\n    @media screen and (max-width: 500px) {\r\n      width: 90%;\r\n    }\r\n    color: ${({ theme }) => theme.text};\r\n    .MuiTypography-root {\r\n      font-family: 'NanumBarunGothic';\r\n      flex: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PostListErrorBlock = styled(ErrorBlock)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n  .title {\r\n    font-size: 1.25rem;\r\n    font-family: 'Raleway';\r\n    font-weight: 600;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .sub-title {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\nconst WritePostButton = ({ isDarkTheme }) => {\r\n  const btn = !isDarkTheme ? (\r\n    <Button cyan=\"true\" to={'/blog/write'}>\r\n      포스트 작성\r\n    </Button>\r\n  ) : (\r\n    <Button violet=\"true\" to={'/blog/write'}>\r\n      포스트 작성\r\n    </Button>\r\n  );\r\n  return btn;\r\n};\r\n\r\nconst PageBlock = ({ block, handlePageBlock }) => {\r\n  return (\r\n    <div className=\"page-block\">\r\n      <Typography>페이지당 포스트 개수</Typography>\r\n      <PageSlider\r\n        valueLabelDisplay=\"auto\"\r\n        defaultValue={10}\r\n        marks\r\n        min={10}\r\n        max={50}\r\n        step={10}\r\n        value={block}\r\n        onChange={handlePageBlock}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PostList = ({\r\n  postList,\r\n  loading,\r\n  error,\r\n  showWriteButton,\r\n  isDarkTheme,\r\n  username,\r\n  tag,\r\n  block,\r\n  handlePageBlock,\r\n}) => {\r\n  if (error) {\r\n    return (\r\n      <Responsive>\r\n        <PostListErrorBlock>\r\n          <span className=\"error-title\">블로그 리스트 요청 실패.</span>\r\n          <span className=\"error-msg\">ERROR MESSAGE: {error.message}</span>\r\n        </PostListErrorBlock>\r\n      </Responsive>\r\n    );\r\n  }\r\n  return (\r\n    <Responsive>\r\n      <PostListBlock>\r\n        <Helmet>\r\n          <title>MAKE UP HARA :: BLOG</title>\r\n          {username && <title>{username} - MAKE UP HARA :: BLOG</title>}\r\n          {tag && <title>#{tag} - MAKE UP HARA :: BLOG</title>}\r\n          {username && tag && (\r\n            <title>\r\n              {username}#{tag} - MAKE UP HARA :: BLOG\r\n            </title>\r\n          )}\r\n        </Helmet>\r\n        <TitleWrapper>\r\n          <span className=\"title\">\r\n            BLOG\r\n            {username && !tag && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">{username}</span>\r\n              </span>\r\n            )}\r\n            {tag && !username && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">#{tag}</span>\r\n              </span>\r\n            )}\r\n            {username && tag && (\r\n              <span>\r\n                {' '}\r\n                - <span className=\"sub-title\">{username}</span>\r\n                <span className=\"sub-title\">#{tag}</span>\r\n              </span>\r\n            )}\r\n          </span>\r\n          {showWriteButton && <WritePostButton isDarkTheme={isDarkTheme} />}\r\n        </TitleWrapper>\r\n        <PageBlock handlePageBlock={handlePageBlock} />\r\n        {postList && (\r\n          <div>\r\n            {postList.map((post) => (\r\n              <PostItem post={post} username={username} key={post._id} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </PostListBlock>\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport qs from 'qs';\r\nimport { getList, unloadList } from '../../module/redux/post';\r\nimport PostList from '../../components/post/PostList';\r\nimport loadable from '@loadable/component';\r\nconst PaginationContainer = loadable(() => import('./PaginationContainer'));\r\n\r\nconst PostListContainer = ({ location, match }) => {\r\n  // 액션 함수 불러오기\r\n  const dispatch = useDispatch();\r\n  // 전역 상태 불러오기\r\n  const { postList, error, loading, user, isDarkTheme } = useSelector(\r\n    ({ post, loading, user, theme }) => ({\r\n      postList: post.postList,\r\n      error: post.postListError,\r\n      loading: loading['post/GET_LIST'],\r\n      user: user.user,\r\n      isDarkTheme: theme.isDarkTheme,\r\n    }),\r\n  );\r\n  // 유저 정보는 path에서 불러오기\r\n  const { username } = match.params;\r\n  // tag, page는 쿼리에서 불러오기\r\n  const { tag, page } = qs.parse(location.search, {\r\n    ignoreQueryPrefix: true,\r\n  });\r\n  const [block, setBlock] = useState(10);\r\n  const handlePageBlock = (e, newValue) => {\r\n    setBlock(newValue);\r\n  };\r\n\r\n  const pagination = useRef(false);\r\n  useEffect(() => {\r\n    pagination.current = false;\r\n    dispatch(getList({ username, tag, page, block }));\r\n    pagination.current = true;\r\n    return () => {\r\n      dispatch(unloadList());\r\n      pagination.current = false;\r\n    };\r\n  }, [dispatch, tag, page, username, block]);\r\n\r\n  return (\r\n    <>\r\n      <PostList\r\n        loading={loading}\r\n        error={error}\r\n        postList={postList}\r\n        showWriteButton={user}\r\n        isDarkTheme={isDarkTheme}\r\n        username={username}\r\n        tag={tag}\r\n        block={block}\r\n        handlePageBlock={handlePageBlock}\r\n      />\r\n      {pagination.current && !error && <PaginationContainer />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostListContainer);\r\n"],"sourceRoot":""}